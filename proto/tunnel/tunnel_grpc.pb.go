// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.2
// source: proto/tunnel/tunnel.proto

package grpctunnel

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TunnelClient is the client API for Tunnel service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TunnelClient interface {
	// Register is used to register targets reachable via either the client
	// or server and request new Tunnel RPC invocations.
	Register(ctx context.Context, opts ...grpc.CallOption) (Tunnel_RegisterClient, error)
	// Tunnel allows the tunnel client and server to create a bidirectional stream
	// in which data can be forwarded.
	Tunnel(ctx context.Context, opts ...grpc.CallOption) (Tunnel_TunnelClient, error)
}

type tunnelClient struct {
	cc grpc.ClientConnInterface
}

func NewTunnelClient(cc grpc.ClientConnInterface) TunnelClient {
	return &tunnelClient{cc}
}

func (c *tunnelClient) Register(ctx context.Context, opts ...grpc.CallOption) (Tunnel_RegisterClient, error) {
	stream, err := c.cc.NewStream(ctx, &Tunnel_ServiceDesc.Streams[0], "/grpctunnel.Tunnel/Register", opts...)
	if err != nil {
		return nil, err
	}
	x := &tunnelRegisterClient{stream}
	return x, nil
}

type Tunnel_RegisterClient interface {
	Send(*RegisterOp) error
	Recv() (*RegisterOp, error)
	grpc.ClientStream
}

type tunnelRegisterClient struct {
	grpc.ClientStream
}

func (x *tunnelRegisterClient) Send(m *RegisterOp) error {
	return x.ClientStream.SendMsg(m)
}

func (x *tunnelRegisterClient) Recv() (*RegisterOp, error) {
	m := new(RegisterOp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tunnelClient) Tunnel(ctx context.Context, opts ...grpc.CallOption) (Tunnel_TunnelClient, error) {
	stream, err := c.cc.NewStream(ctx, &Tunnel_ServiceDesc.Streams[1], "/grpctunnel.Tunnel/Tunnel", opts...)
	if err != nil {
		return nil, err
	}
	x := &tunnelTunnelClient{stream}
	return x, nil
}

type Tunnel_TunnelClient interface {
	Send(*Data) error
	Recv() (*Data, error)
	grpc.ClientStream
}

type tunnelTunnelClient struct {
	grpc.ClientStream
}

func (x *tunnelTunnelClient) Send(m *Data) error {
	return x.ClientStream.SendMsg(m)
}

func (x *tunnelTunnelClient) Recv() (*Data, error) {
	m := new(Data)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TunnelServer is the server API for Tunnel service.
// All implementations must embed UnimplementedTunnelServer
// for forward compatibility
type TunnelServer interface {
	// Register is used to register targets reachable via either the client
	// or server and request new Tunnel RPC invocations.
	Register(Tunnel_RegisterServer) error
	// Tunnel allows the tunnel client and server to create a bidirectional stream
	// in which data can be forwarded.
	Tunnel(Tunnel_TunnelServer) error
	mustEmbedUnimplementedTunnelServer()
}

// UnimplementedTunnelServer must be embedded to have forward compatible implementations.
type UnimplementedTunnelServer struct {
}

func (UnimplementedTunnelServer) Register(Tunnel_RegisterServer) error {
	return status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedTunnelServer) Tunnel(Tunnel_TunnelServer) error {
	return status.Errorf(codes.Unimplemented, "method Tunnel not implemented")
}
func (UnimplementedTunnelServer) mustEmbedUnimplementedTunnelServer() {}

// UnsafeTunnelServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TunnelServer will
// result in compilation errors.
type UnsafeTunnelServer interface {
	mustEmbedUnimplementedTunnelServer()
}

func RegisterTunnelServer(s grpc.ServiceRegistrar, srv TunnelServer) {
	s.RegisterService(&Tunnel_ServiceDesc, srv)
}

func _Tunnel_Register_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TunnelServer).Register(&tunnelRegisterServer{stream})
}

type Tunnel_RegisterServer interface {
	Send(*RegisterOp) error
	Recv() (*RegisterOp, error)
	grpc.ServerStream
}

type tunnelRegisterServer struct {
	grpc.ServerStream
}

func (x *tunnelRegisterServer) Send(m *RegisterOp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *tunnelRegisterServer) Recv() (*RegisterOp, error) {
	m := new(RegisterOp)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Tunnel_Tunnel_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TunnelServer).Tunnel(&tunnelTunnelServer{stream})
}

type Tunnel_TunnelServer interface {
	Send(*Data) error
	Recv() (*Data, error)
	grpc.ServerStream
}

type tunnelTunnelServer struct {
	grpc.ServerStream
}

func (x *tunnelTunnelServer) Send(m *Data) error {
	return x.ServerStream.SendMsg(m)
}

func (x *tunnelTunnelServer) Recv() (*Data, error) {
	m := new(Data)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Tunnel_ServiceDesc is the grpc.ServiceDesc for Tunnel service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Tunnel_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpctunnel.Tunnel",
	HandlerType: (*TunnelServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Register",
			Handler:       _Tunnel_Register_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Tunnel",
			Handler:       _Tunnel_Tunnel_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/tunnel/tunnel.proto",
}
